further  |ˈfɜːrðər| - dodatkowy
with - za pomocą
suppress  |səˈpres| - stłumić
be prefixed - poprzedzić coś czymś
consist of |kənˈsɪst| - składać się z
typically  |ˈtɪpɪkli| - zwykle
letter - literka
lowercase letters
issue - opublikować (jakiś tekst)
the file located on the file system
recognize  |ˈrekəɡnaɪz| - rozpoznać, uznać za
recognizing  |ˈrekəgˌnaɪzɪŋ|
recognized  |ˈrekəgˌnaɪzd| - uznany za
repeatedly  |rɪˈpiːtɪdli| - wielokrotnie
token  |ˈtoʊkən| - symboliczny
colon  |ˈkoʊlən| - dwukropek
followed by - po którym następuje
asterisk  |ˈæstərɪsk| - gwiazdka
simultaneously  |ˌsɪmlˈteɪnɪəsli| - jednocześnie
underlying  |ˌʌndərˈlaɪɪŋ| - podstawowy
be responsible for - być odpowiedzilnym za
rapidly  |ˈræpɪdli| - szybko
develop  |dɪˈveləp| - rozwijać
spawn  |spɔːn| -  ?

w can develop and maintan any applications
we develop an package and run anywhere
it is easy to package an application within a container
in the similar manner
there are rules for both the file one and file two - zarówna dla ... jak i dla
typicall it is named Dockerfile but it doesn't have to
the context is a set of files within the local file system
the docker deamon is responsible for running containers
a container doesn't container all operating system like virtual machine does\
so they are smaller and quicker
a container container an application and its settings
a container provide an application isolation
a container is instance of an image
please, issue any command - wydawać polecenie
the command is prefixed with 'sudo' (super user do)
ten tips for a successful meeting
be well prepared
a good plan can singnificantly reduce the length of any meeting
write the purpose of the meeting in the invitation agenda
invite only the necessary |ˈnesəseri| people
make sure that you allow due time to obtain all the information you need ahead of the meeting
try not to use the phone or laptop
just focus on the meeting
not all guests to attend the entire meeting
those who no longer need may leave early
don't be late for a meeting
always create a summary of the meeting
the issue is still there - problem jest nadal tu
this chapter intoduces the bash command
this chapter demonstrates essential (podstawowe) basic commands
the issue with the missing file has been resolved |rɪˈzɑːlvd|
here's what changed in this issue in the last few minutes
if you have comments, please let me know
let your team know what you want to achieve
you can see its version information
beware (uwaga)! Unix is case-sensitive so commands must use only lowercase letters
now, issue a 'clear' command (or press Ctrl + L keys) to clear the terminal screen
type 'whoami' then hit Return to see your user name
finally issue an 'exit' command (or press Ctrl + D keys) to end the session
this should respond with the directory location of the Bash program
user hits the Return key after typing a command at a shell prompt
it adds a final invisible newline character
and then splits it into separate words broken by spaces or tabs
each of these words is known as a “token”
the interpreter next examines the first token to see if it is one of the commands
or an executable program located on the file system
don't Forget. each Unix program can accept standard input
it searches through the directories on a specified path to find a program of that name
there is no a program of that name
the Bash 'type' command can be used to determine whether a token is recognized as a built-in shell command
it can display a message if none can be found
there are files on the file system
type 'type clear' then hit Return to see the location of the 'clear' program
type 'type exit' then hit Return to discover that exit is in fact a built-in shell command
this token cannot be found
it prints them unless they are recognized as a command “option”
many built-in commands and programs accept one or more options
options specify how the programs should be executed |ˈeksəˌkjuːtəd| (wykonywane)
typically (zazwyczaj), an option consists of a dash followed by (po którym następuje) a letter
there is a dash followed by a letter
that text printed without an added newline
type "echo -n" to see that text printed without an added newline
type 'echo -n' followed by some text - po którym następuje
these are named “containers” that each store a piece of information - one są nazywane
their names use all uppercase characters
to access the information stored within a variable its name must be prefixed with a $ dollar sign
you will often want to suppress the automatic newline when printing a request for user input
the shell will search directories to find your program's location
you can also use this command to discover which directories it searches when you issue any command
you can always list the contents of any directory with the 'ls' command
type it to see the absolute path address of your location
type 'ls' then hit Return to see the contents of the current directory
specify the relative address of a nested sub-directory to the 'ls' command
type 'pwd' then hit Return to confirm the absolute path address of that new location
type 'cd ..' then hit Return to move to the parent directory
you can also use this command to return to the previous directory you were located in
type 'cd ~' then hit Return to go back to your home directory
this command will list all files and folders in the current or specified directory
it will list files except (z wyjątkiem) special hidden files
typically the system files are hidden
hidden files can be included in the list displayed by the 'ls' command by adding '-a' option
if you wish to delete a directory remember that it may contain hidden files
optionally, a filename pattern can be supplied to the 'ls' command
it will list only filenames matching the specified pattern
special “wildcard” characters, described in the table below
the wildcard can be used to specify the filename pattern to be matched
the pattern matches the file's names - dopasowuje
there are matched files (dopasowane)
there is one single character that may be unknown
The ? wildcard is used to print filenames out where only one single character may be unknown
the * wildcard is used to specify a pattern that matches filenames where multiple characters may be unknown
placing an exclamation mark at the start of a set pattern [] lists files not matched
you can include a hyphen in the set pattern by placing it first or last in the list within the square brackets
that command can produce |prəˈduːs| the error message
there is no such file or directory
type 'ls' at the prompt then hit Return to see all unhidden files
there are the unhidden files in the current working directory
type it to see all files named “doc” that have a single-letter file extension
type it to see all files of any name that have a “.c” file extension
there are no matches (dopasowywania)
additionally, brace expansion can produce a sequence of letters {a..z}
type it to see four expanded strings – both appended and prepended
type echo {a..z} then hit Return to see an expanded letter sequence of the lowercase alphabet
type echo {1..20} then hit Return to see an expanded numeric sequence from 1 to 20
beware. there must be no spaces within the braces or between the braces and each specified prefix and suffix
version 4 introduced zero-padded brace expansion so that echo {001..3} produces 001 002 003
semi-colon ; character allows two commands to be issued on the same line
type it then hit Return to see the shell variable printed literally in output
always enclose phrases you want to use literally within single quotes to avoid interpretation
The newline \n and tab \t sequences can be included in phrases if preceded by a backslash.
the shell prompt string changes to a > to indicate it is awaiting further input
Hit Return to scroll down the screen one line at a time
The | character is a “pipe” that allows output to be redirected
type 'man ps' then hit Return to see the manual page for the 'ps' command
you can use the 'type' command to discover whether a command is a shell built-in or its filesystem location.
you can also use the 'info' command as an alternative to 'man'
the command ps $$ displays the current process information
user and host names can be displayed with the 'whoami' and 'hostname' commands
a Terminal window can be cleared |ˈklɪrd| using the 'clear' command
standard input can be printed on standard output using the shell built-in echo command




